
Our website is built using a documentation generator called Sphinx.
Sphinx turns plain text files that we've written into an html format (it can generate other formats too, like PDFs, but we use it for html generation).
Once those html files have been generated, we use the hosting platform readthedocs to turn them into an accessible website. Yay!

The root directory of our documentation is MCDC/docs/source. 
It contains the Sphinx configuration file ``conf.py``, the root document ``index.rst``, and several other .rst files.
Each rst file generates an html page; the main page of the website is generated by the root document.
The root directory also contains several subdirectories, each of which has its own ``index.rst`` file and several other rst files, all of which generate individual html pages. 
It may be useful to take a look at MCDC/docs/source/index.rst as one example of a Sphinx rst file. 


We write files for Sphinx using a plaintext markup language called reStructuredText (Markdown is another plaintext markup language that you may be familiar with).
This page will include basic information on reStructuredText that will get you through creating some documentation for yourself. 
For more info, go here.

"Explicit markup" is used in reStructuredText for constructs that need special handling, like footnotes, specially highlighted paragraphs, comments, etc.
A block of explicit markup text starts with ".. " and is terminated by the next paragraph at the same level of indentation.

Sphinx generates webpage elements using explicit markup blocks called directives. 
Directives can have arguments, options, and content. 
For example, the image directive takes one argument (the name of the image) and has many options, including the height and width of the image.
.. image:: picture.jpeg
   :hieght: 100px
   :width: 200px

An explicit markup block without a directive is taken as a comment that will not appear on the webpage.

Sphinx's main directive is the toctree directive, which generates a table of contents tree (toctree) with links to other generated webpages.
The content of the toctree directive is a list of document names, using their name relative to the current document, and excluding the .rst extension.
For example, the MCDC docs root directory contains index.rst, install.rst, and the subdirectory user/ which also contains an index.rst file. 
To reference those pages, 
.. toctree::
   install
   user/index

Sphinx will generate an html file for all rst files in the source directory and its subdirectories.
By default, source/index.rst generates the main page of the website, build/index.html; the rest of the generated pages and subpages are linked together using toctrees.
Every rst file must occur in some toctree directive, because otherwise the generated webpage is not reachable through standard navigation.

Within MC/DC's source code, we use docstrings as inline documentation for functions and classes.
We also need MC/DC's functionality documented on our website.
Rather than re-write all of that information, we use two Sphinx extensions -- autodoc and autosummary -- to turn the existing docstrings in our code into rst files.
This also keeps us from having to maintain two separate pieces of documentation.
For autodoc and autosummary to work, the docstrings within MC/DC's source code must be written in correct reStructuredText.

The autodoc extension includes a set of directives to document different chunks of code: modules, functions, classes, etc. 
For example, all of the information on the mcdc.material page was generated with a single line:
.. autofunction:: material


An rst file with an autodoc directive is required for each module or function that we would like to document.
Rather than create each of these rst files by hand, we use the autosummary extension to do it for us.
For example, look at the source/pythonapi/index.rst file. 
We start with the main heading, "Input Definition", then a subheading, "Defining materials", then an autosummary directive.
The content of the first autosummary directive contains the names of two functions: mcdc.material and mcdc.nuclide. 
This directive will do three things: 1. create a table on the webpage with mcdc.material and mcdc.nuclide as entries; 2. generate an rst file containing an autofunction directive for both mcdc.material and mcdc.nuclide, found in pythonapi/generated/; 3. link from the table entries to the webpages for those rst files. 
On the Input Definition webpage under the "Defining materials" subheading, we see the table generated by autosummary. 
Clicking on mcdc.material will take us to the webpage generated by the autosummary rst file. 
The content on the mcdc.material page was generated by the autofunction directive in source/pythonapi/generated/mcdc.material.rst. 


We can now assume that you've written some code for MC/DC and used autosummary to add it to MC/DC's documentation.
What's left now is to check that the rst files you've written generate the html files you intend.
Both sphinx and furo (the package we use for website theming) should both have been installed with MC/DC.
To check, type sphinx-build --version on the commandline.
If not installed, pip install sphinx furo.
With sphinx installed, from docs/, run make html.
This generates local html files from the rst files in source.
To check how the website will look with your changes, launch build/html/index.html with your browser of choice (from the commandline, open build/html/index.html). 
Continue making changes to your local rst files, building local docs with make html, and launching the generated html files until you're satisfied with how the website will look.


A final important note: autodoc imports our modules in order to document them, meaning that in the process of creating MC/DC's documentation, Sphinx imports every python module that MC/DC imports.
This doesn't cause any issues when you build the webpages locally because you already have all of MC/DC's requisite packages installed.
However, this *WILL* cause issues with our documentation website host, readthedocs.
Like you just did, readthedocs will checkout our repo and use Sphinx to generate html files from our rst files, attempting to import all of MC/DC's packages along the way.
There are some python packages, like mpi4py, that readthedocs is unable to import, causing the documentation build to fail.
If you've added any new packages, add them to the MOCK_MODULES list in docs/source/conf.py. 
This will allow readthedocs to get past the imports without issue.


Once you're satisfied with your changes and have added any new modules to conf.py, submit a PR!


